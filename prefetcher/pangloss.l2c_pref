#include "cache.h"

#define DC_range_l2c (128)	// 实际delta范围：-63~63 
#define DC_ways_l2c 16      
#define DC_CountMax_l2c 256   // LFU位有8个bit
#define PC_sets_l2c 256		// Page Cache的index范围为0~255，set index: page address%256 
#define PC_ways_l2c 12		
#define PC_tag_bits_l2c 10 	// 页面标签：10位

// Delta Cache 
class Delta_Cache_l2c{
public:
	int next_delta;		// 以当前的delta为索引，每组中的块代表最频繁访问的 next deltas
	int count;			// next delta命中计数
};
// Page Cache
class Page_Cache_l2c{
public:
	int deltaPrev;
	int offsetPrev;		//之前的地址偏移量，消耗6位(0~63）
	int pageTag;
	int NRUbit;			//用于近似LRU替换策略的1位，总是驱逐最近未使用的块
};
Delta_Cache_l2c delta_Cache[DC_range_l2c][DC_ways_l2c];
Page_Cache_l2c page_Cache[PC_sets_l2c][PC_ways_l2c];

void CACHE::l2c_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L2C pangloss prefetcher" << endl;

	for (int i=0; i<DC_range_l2c; i++){ 
		for (int j=0; j<DC_ways_l2c; j++){ 
			delta_Cache[i][j].next_delta=1+DC_range_l2c/2; 
			delta_Cache[i][j].count=0;
		}
	}
}


// 传入新的delta transition，更新 Delta Cache
void update_Delta_Cache_l2c(int delta_from, int delta_to){
	int isHit = 0;
	for (int i=0; i<DC_ways_l2c; i++){
		// 在每次出现命中时，将相应(delta,next delta)项的计数器递增
		if (delta_Cache[delta_from][i].next_delta==delta_to){
			delta_Cache[delta_from][i].count++;
			//当出现溢出时，将相应delta的所有next delta项的计数器值减半，从而保留几乎相同的计数比例
			if (delta_Cache[delta_from][i].count==DC_CountMax_l2c){
				for (int j=0; j<DC_ways_l2c; j++){
					delta_Cache[delta_from][j].count/=2;
				}
			}	
			isHit=1;			
			break;
		}
	}
	// 未命中，则用Delta Cache中最不常用(count最小)的项进行替换
	if (isHit==0){	
		int min_freq=delta_Cache[delta_from][0].count;
		int min_freq_way=0;		
		for (int i=1; i<DC_ways_l2c; i++){
			if (delta_Cache[delta_from][i].count < min_freq){
				min_freq = delta_Cache[delta_from][i].count;
				min_freq_way = i;
			}
		}
		delta_Cache[delta_from][min_freq_way].next_delta = delta_to;
		delta_Cache[delta_from][min_freq_way].count = 1; 
	}
}

/* addr: 访问相应缓存的物理地址                     
    ip: 负责发起请求的指令指针
    cache_hit: 指示上述地址是否导致缓存命中的标志
    type: 表示该请求是需求请求还是来自更高缓存级别的预取请求  Whether the request is a demand-request or a prefetch request from a higher cache level
    metadata_in: 从较高缓存级别的预取器传递来的任何 64 位信息（不存在于 中l1d_prefetcher_operate）。默认值为 0
    return: 1. 在l1d_prefetcher_operate中：无返回
            2. 在L2C/LLC 的预取器中：想要传递给较低级别​​的任何64位(uint64_t)信息
    这是定义预取器如何运行的方法，即预取算法必须在此方法中定义。(
    此方法在每次缓存访问时被调用，即在每次缓存访问时调用该预取器，
    并且只要预取队列未满（否则预取请求(s)将被丢弃），预取器可以决定发送(或不发送)任意数量的预取。
*/
uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
	uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
	uint64_t page = addr >> LOG2_PAGE_SIZE;
	int page_offset = cl_addr&63;
	int page_index = page%PC_sets_l2c;
	int page_tag = (page/PC_sets_l2c)&((1<<PC_tag_bits_l2c)-1);
	// 在Page Cache中找有没有对应的页面
	int page_way=-1;
	for (int i=0; i<PC_ways_l2c; i++){		
		if (page_Cache[page_index][i].pageTag==page_tag){
			page_way=i;			
			break;
		}
	}
	
	int cur_delta = 1 + DC_range_l2c/2; 
	int matched=0;

	//（如果在Page Cache中找到了对应的页面（Page Cache hit），并且访问不是来自预取未命中
	// 根据Page Cache中的deltaPrev和offsetPrev来计算基于新地址的当前delta
	if ( (page_way!=-1) && !((type==PREFETCH) && (cache_hit==0)) ){	
		int delta_prev_l2c=page_Cache[page_index][page_way].deltaPrev;
		int offset_prev_l2c=page_Cache[page_index][page_way].offsetPrev;
		cur_delta = page_offset-offset_prev_l2c + DC_range_l2c/2;
		matched=1;
		update_Delta_Cache_l2c(delta_prev_l2c, cur_delta);				
	} 
	
	int next_delta=cur_delta;
	uint64_t addr_n=addr;
	int count=0;

	// 根据 MSHR 占用率等调整预取程度。
	int degree = (MSHR.SIZE-MSHR.occupancy)*2/3;
	if ((type==PREFETCH) && (cache_hit==0)) degree/=2;

	for (int i_=0; i_<degree && count<degree; i_++){	
		int sum = 0;
		for (int i=0; i<DC_ways_l2c; i++){		
			sum += delta_Cache[next_delta][i].count;
		}
		// 找到LFU计数最大的前两项
		int max_count=delta_Cache[next_delta][0].count;
		int max_count_way=0;	
		int last_max_count=-1;
		int last_max_count_way=-1;
		for (int i=1; i<DC_ways_l2c; i++){
			if (delta_Cache[next_delta][i].count > max_count){
				last_max_count = max_count;
				last_max_count_way = max_count_way;
				max_count = delta_Cache[next_delta][i].count;
				max_count_way = i;
			}else if(delta_Cache[next_delta][i].count > last_max_count){
				last_max_count = delta_Cache[next_delta][i].count;
				last_max_count_way = i;
			}
		}
		// 将(delta,next_delta)项的计数器的数值除以delta的所有next delta的计数器数值的和，得到next_delta对应的transition概率
		// 只会预取transition概率大于1/3的next delta
		int best_delta = delta_Cache[next_delta][max_count_way].next_delta;
		if ((float)delta_Cache[next_delta][max_count_way].count/(float)sum<1/3.0){
			break;
		}else{
			if((count<degree)){
				uint64_t pf_address = ((addr_n>>LOG2_BLOCK_SIZE)+(best_delta-DC_range_l2c/2)) << LOG2_BLOCK_SIZE;
				if ((pf_address >> LOG2_PAGE_SIZE)==page){	
					prefetch_line(ip, addr, pf_address, FILL_L2, 0);				
					count++;
				}						
			}
			if((count<degree)&&(last_max_count_way!=-1)&&((float)delta_Cache[next_delta][last_max_count_way].count/(float)sum > 1/3.0)){
				uint64_t pf_address = ((addr_n>>LOG2_BLOCK_SIZE)+(delta_Cache[next_delta][last_max_count_way].next_delta-DC_range_l2c/2)) << LOG2_BLOCK_SIZE;
				if ((pf_address >> LOG2_PAGE_SIZE)==page){	
					prefetch_line(ip, addr, pf_address, FILL_L2, 0);				
					count++;
				}	
			} 		
		}
		next_delta = best_delta;
		uint64_t pf_address = ((addr_n>>LOG2_BLOCK_SIZE)+(best_delta-DC_range_l2c/2)) << LOG2_BLOCK_SIZE;
		addr_n = pf_address;		
	}

	// 未命中，则用Page Cache中上一次使用时间最久(NRU bit为0)的项进行替换
	if (page_way==-1) {	
		for (int i=0; i<PC_ways_l2c; i++){
			if (page_Cache[page_index][i].NRUbit==0){
				page_way=i;
				break;
			}				
		}
		if (page_way==-1){		//全是1则，更新NRU bit
			page_way=0;
			for (int i=0; i<PC_ways_l2c; i++)
				page_Cache[page_index][i].NRUbit=0;
		}
	}
	// 更新 Page Cache
	if (matched)
		page_Cache[page_index][page_way].deltaPrev=cur_delta;
	else
		page_Cache[page_index][page_way].deltaPrev=0;
		
	page_Cache[page_index][page_way].offsetPrev=page_offset;
	page_Cache[page_index][page_way].pageTag=page_tag;
	page_Cache[page_index][page_way].NRUbit=1;
	
	return metadata_in;
}

/*  addr: 现在已被带到缓存中的地址的[6:63]位(之前的预取请求发出的地方)
    set: 此地址(addr)映射到缓存中的组号     The set-number in the cache, to which this address maps to
    way: 此地址(addr)映射到上面集合(set)中的路号     The way-number in the above set, to which this address maps to
    prefetch: 指示将被逐出的地址是否为预取地址的标志    A flag indicating whether the address that will be evicted, was a prefetched address
    evicted_addr: 将被逐出的地址(位于上面的set-way对)的[6:63]位    Bits[6:63] of the address (located at above set-way pair) which will be evicted
    metadata_in: 从较低缓存级别的预取器传递来的任何64位信息，默认值为0      Any 64-bit information passed from the lower cache level's prefetcher. Default value is 0
    return: 1. 在l1d_prefetcher_cache_fill中：无
            2. 在L2C/LLC的预取器中：想要传递给更高级别的任何64位(uint32_t)信息
    这是在一个预取请求得到解决时调用的方法，即过去发送预取请求的地址现在已被带到缓存中，并将放置在上面提到的set和way中。
    请注意，此方法是在替换发生之前调用的，即set和way的位置中仍然包含有关先前映射地址的信息。
*/
uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
	return metadata_in;	
}


void CACHE::l2c_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L2C pangloss prefetcher final stats" << endl;
}
