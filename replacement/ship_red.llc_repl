#include "cache.h"
#include <cstdlib>
#include <ctime>

/* ship */
#define maxRRPV 3
#define SHCT_SIZE  16384
#define SHCT_PRIME 16381
#define SAMPLER_SET (256*NUM_CPUS)
#define SAMPLER_WAY LLC_WAY
#define SHCT_MAX 7

/* ReD */
#define RED_SETS_BITS 9
#define ART_SETS 512				// (1<<RED_SETS_BITS) = 512
#define ART_WAYS 16
#define RED_TAG_SIZE_BITS 11
#define RED_SECTOR_SIZE_BITS 2
#define RED_SECTOR_SIZE 4 			// (1<<RED_SECTOR_SIZE_BITS) = 4
#define PC_SAMPLE_RATIO 4
#define PC_ENTRY_SIZE 256			// pc_entry为8位，而 1<<8 = 256

/* ship */
uint32_t rrpv[LLC_SET][LLC_WAY];

// sampler structure
class SAMPLER_class
{
  public:
    uint8_t valid,
            type,
            used;

    uint64_t tag, cl_addr, ip;
    
    uint32_t lru;

    SAMPLER_class() {
        valid = 0;
        type = 0;
        used = 0;

        tag = 0;
        cl_addr = 0;
        ip = 0;

        lru = 0;
    };
};

// sampler
uint32_t rand_sets[SAMPLER_SET];
SAMPLER_class sampler[SAMPLER_SET][SAMPLER_WAY];

// prediction table structure
class SHCT_class {
  public:
    uint32_t counter;

    SHCT_class() {
        counter = 0;
    };
};
SHCT_class SHCT[NUM_CPUS][SHCT_SIZE];

/* ReD */
struct ART_entry {
	uint64_t addr_tag;                       // ART使用部分地址标签(PAt),大小为11bit
	uint8_t valid[RED_SECTOR_SIZE];     // 0表示invalid；1表示valid
};

struct ART_set {
	struct ART_entry ART_entrys[ART_WAYS];
	uint32_t insert_position;     	// 以FIFO方式插入ART_entrys中的位置              
};

struct ART_entry_PCidx {
	uint64_t pc_entry[RED_SECTOR_SIZE];  
};

struct PCRT_entry {
	uint32_t reuse_counter,         
			 noreuse_counter;        
};

struct ART_set ART_ship[ART_SETS];
struct ART_entry_PCidx ART_PC_ship[ART_SETS/PC_SAMPLE_RATIO][ART_WAYS];
struct PCRT_entry PCRT_ship[PC_ENTRY_SIZE];

uint32_t miss_count;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SHIP-ReD state" << endl;

    /* ship */
    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }

    // initialize sampler
    for (int i=0; i<SAMPLER_SET; i++) {
        for (int j=0; j<SAMPLER_WAY; j++) {
            sampler[i][j].lru = j;
        }
    }

    // randomly selected sampler sets
    srand(time(NULL));
    unsigned long rand_seed = 1;
    unsigned long max_rand = 1048576;
    uint32_t my_set = LLC_SET;
    int do_again = 0;
    for (int i=0; i<SAMPLER_SET; i++)
    {
        do 
        {
            do_again = 0;
            rand_seed = rand_seed * 1103515245 + 12345;
            rand_sets[i] = ((unsigned) ((rand_seed/65536) % max_rand)) % my_set;
            // printf("Assign rand_sets[%d]: %u  LLC: %u\n", i, rand_sets[i], my_set);
            for (int j=0; j<i; j++) 
            {
                if (rand_sets[i] == rand_sets[j]) 
                {
                    do_again = 1;
                    break;
                }
            }
        } while (do_again);
        // printf("rand_sets[%d]: %d\n", i, rand_sets[i]);
    }

    /* ReD*/
    for (int i=0; i<ART_SETS; i++) {
		ART_ship[i].insert_position = 0;
		for (int j=0; j<ART_WAYS; j++) {
			ART_ship[i].ART_entrys[j].addr_tag=0;
			for (int k=0; k<RED_SECTOR_SIZE; k++) {
				ART_ship[i].ART_entrys[j].valid[k] = 0;
			}
		}
	}

	for (int i=0; i<ART_SETS/PC_SAMPLE_RATIO; i++) {
		for (int j=0; j<ART_WAYS; j++) {
			for (int k=0; k<RED_SECTOR_SIZE; k++) {
				ART_PC_ship[i][j].pc_entry[k] = 0;
			}
		}
	}

	for (int i=0; i<PC_ENTRY_SIZE; i++) {
		PCRT_ship[i].reuse_counter = 3;
		PCRT_ship[i].noreuse_counter = 0;
	}
	miss_count=0; 
}

/* ship */
// check if this set is sampled
uint32_t is_it_sampled(uint32_t set)
{
    for (int i=0; i<SAMPLER_SET; i++)
        if (rand_sets[i] == set)
            return i;

    return SAMPLER_SET;
}

// update sampler
void update_sampler(uint32_t cpu, uint32_t s_idx, uint64_t address, uint64_t ip, uint8_t type)
{
    SAMPLER_class *s_set = sampler[s_idx];
    uint64_t tag = address / (64*LLC_SET); 
    int match = -1;

    // check hit
    for (match=0; match<SAMPLER_WAY; match++)
    {
        if (s_set[match].valid && (s_set[match].tag == tag))
        {
            uint32_t SHCT_idx = s_set[match].ip % SHCT_PRIME;
            if (SHCT[cpu][SHCT_idx].counter > 0)
                SHCT[cpu][SHCT_idx].counter--;

            /*
            if (draw_transition)
                printf("cycle: %lu SHCT: %d ip: 0x%llX SAMPLER_HIT cl_addr: 0x%llX page: 0x%llX block: %ld set: %d\n", 
                ooo_cpu[cpu].current_cycle, SHCT[cpu][SHCT_idx].dead, s_set[match].ip, address>>6, address>>12, (address>>6) & 0x3F, s_idx);
            */

            //s_set[match].ip = ip; // SHIP does not update ip on sampler hit
            s_set[match].type = type; 
            s_set[match].used = 1;
            //D(printf("sampler hit  cpu: %d  set: %d  way: %d  tag: %x  ip: %lx  type: %d  lru: %d\n",
            //            cpu, rand_sets[s_idx], match, tag, ip, type, s_set[match].lru));

            break;
        }
    }

    // check invalid
    if (match == SAMPLER_WAY)
    {
        for (match=0; match<SAMPLER_WAY; match++)
        {
            if (s_set[match].valid == 0)
            {
                s_set[match].valid = 1;
                s_set[match].tag = tag;
                s_set[match].ip = ip;
                s_set[match].type = type;
                s_set[match].used = 0;

                //D(printf("sampler invalid  cpu: %d  set: %d  way: %d  tag: %x  ip: %lx  type: %d  lru: %d\n",
                //            cpu, rand_sets[s_idx], match, tag, ip, type, s_set[match].lru));
                break;
            }
        }
    }

    // miss
    if (match == SAMPLER_WAY)
    {
        for (match=0; match<SAMPLER_WAY; match++)
        {
            if (s_set[match].lru == (SAMPLER_WAY-1)) // Sampler uses LRU replacement
            {
                if (s_set[match].used == 0)
                {
                    uint32_t SHCT_idx = s_set[match].ip % SHCT_PRIME;
                    if (SHCT[cpu][SHCT_idx].counter < SHCT_MAX)
                        SHCT[cpu][SHCT_idx].counter++;

                    /*
                    if (draw_transition)
                        printf("cycle: %lu SHCT: %d ip: 0x%llX SAMPLER_MISS cl_addr: 0x%llX page: 0x%llX block: %ld set: %d\n", 
                        ooo_cpu[cpu].current_cycle, SHCT[cpu][SHCT_idx].dead, s_set[match].ip, address>>6, address>>12, (address>>6) & 0x3F, s_idx);
                    */
                }

                s_set[match].tag = tag;
                s_set[match].ip = ip;
                s_set[match].type = type;
                s_set[match].used = 0;

                //D(printf("sampler miss  cpu: %d  set: %d  way: %d  tag: %x  ip: %lx  type: %d  lru: %d\n",
                //            cpu, rand_sets[s_idx], match, tag, ip, type, s_set[match].lru));
                break;
            }
        }
    }

    // update LRU state
    uint32_t curr_position = s_set[match].lru;
    for (int i=0; i<SAMPLER_WAY; i++)
    {
        if (s_set[i].lru < curr_position)
            s_set[i].lru++;
    }
    s_set[match].lru = 0;
}

/* ReD */
uint8_t search_in_ART( uint64_t subsector,uint64_t ART_set, uint64_t addr_tag)
{
	uint64_t way;
	miss_count++;
	for (way=0; way<ART_WAYS; way++) {
		// 当在 ART 中找到时(reuse hit)
		if ((ART_ship[ART_set].ART_entrys[way].addr_tag == addr_tag) && (ART_ship[ART_set].ART_entrys[way].valid[subsector] == 1)) {
			if (ART_set % PC_SAMPLE_RATIO == 0) {	// 使用1/4的ART集的样本来收集PCRT的信息
				// 利用检索到的触发的PC来增加PCRT中相应的reused计数器
				uint64_t pc_entry = ART_PC_ship[ART_set/PC_SAMPLE_RATIO][way].pc_entry[subsector];
				PCRT_ship[pc_entry].reuse_counter++;

				//当一个计数器(10位)达到最大值时(即>1023时)，将该项的两个计数器都除以2（保持比例）
				if (PCRT_ship[pc_entry].reuse_counter > 1023) {
					PCRT_ship[pc_entry].reuse_counter>>=1;
					PCRT_ship[pc_entry].noreuse_counter>>=1;
				}
				// 该ART项标记为invalid
				ART_ship[ART_set].ART_entrys[way].valid[subsector] = 0; 
			}
			return 1;
		}
	}
	return 0;
}

void insert_to_ART(uint64_t pc_entry, uint64_t subsector, uint64_t ART_set, uint64_t addr_tag)
{
	uint32_t insert_pos;
	uint64_t way;

	for (way=0; way<ART_WAYS; way++) {
		if (ART_ship[ART_set].ART_entrys[way].addr_tag == addr_tag)
			break;
	}
	// 在ART中找到了对应的地址标签
	if (way != ART_WAYS) {
		ART_ship[ART_set].ART_entrys[way].valid[subsector] = 1;

		if (ART_set % PC_SAMPLE_RATIO == 0) {	
			ART_PC_ship[ART_set/PC_SAMPLE_RATIO][way].pc_entry[subsector] = pc_entry;
		}
	}
	else {	//没找到对应的地址标签，则以FIFO方式加入该标签
		insert_pos = ART_ship[ART_set].insert_position;
		
		if (ART_set % PC_SAMPLE_RATIO == 0) {	
			// 遍历ART中插入位置原来的块（4个），驱逐它们
			for (int s=0; s<RED_SECTOR_SIZE; s++) {		
				// 当一个有效的（因此不是重复使用的）块从ART中被驱逐时，利用检索到的触发的PC来增加PCRT中相应的noreused计数器
				if (ART_ship[ART_set].ART_entrys[insert_pos].valid[s]) {	
					uint64_t pc_entry = ART_PC_ship[ART_set/PC_SAMPLE_RATIO][insert_pos].pc_entry[s];
					PCRT_ship[pc_entry].noreuse_counter++;

					//当一个计数器(10位)达到最大值时(即>1023时)，将该项的两个计数器都除以2（保持比例）
					if (PCRT_ship[pc_entry].noreuse_counter > 1023) {
						PCRT_ship[pc_entry].reuse_counter>>=1;
						PCRT_ship[pc_entry].noreuse_counter>>=1;
					}
				}
			}
		}
		ART_ship[ART_set].ART_entrys[insert_pos].addr_tag = addr_tag;
		for (int j=0; j<RED_SECTOR_SIZE; j++) {
			ART_ship[ART_set].ART_entrys[insert_pos].valid[j] = 0;
		}
		ART_ship[ART_set].ART_entrys[insert_pos].valid[subsector] = 1;
		
		if (ART_set % PC_SAMPLE_RATIO == 0) {
			ART_PC_ship[ART_set/PC_SAMPLE_RATIO][insert_pos].pc_entry[subsector] = pc_entry;
		}

		ART_ship[ART_set].insert_position++;
		if (ART_ship[ART_set].insert_position == ART_WAYS) 
			ART_ship[ART_set].insert_position = 0;
	}
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    /* ReD */
    uint64_t block,pc_entry,subsector,ART_set,addr_tag;

	block = full_addr >> 6; 
	pc_entry = (ip >> 2) & (PC_ENTRY_SIZE-1);
    subsector=block & (RED_SECTOR_SIZE-1);		// block的低2位[0:1]
	ART_set = (block>>RED_SECTOR_SIZE_BITS) & (ART_SETS -1);	// 9位，block的[2:10]位
	addr_tag=(block>>(RED_SETS_BITS+RED_SECTOR_SIZE_BITS)) & ((1<<RED_TAG_SIZE_BITS)-1);	// 11位，block的[11:21]位

	if (type == LOAD || type == RFO || type == PREFETCH) {
		uint8_t in_ART = search_in_ART(subsector, ART_set, addr_tag);
		if (!in_ART) {
			// 当没有在ART中找到，并且PCRT对应项的reuse概率大于1/64，小于1/4时，才会插入ART中。或者不满足上述条件的8次中的一次
			if (   (    PCRT_ship[pc_entry].reuse_counter * 64 > PCRT_ship[pc_entry].noreuse_counter
					 && PCRT_ship[pc_entry].reuse_counter * 3 < PCRT_ship[pc_entry].noreuse_counter)
				|| (miss_count % 8 == 0)) {
				insert_to_ART(pc_entry, subsector, ART_set, addr_tag);
			}
			// 当没有在ART中找到，并且PCRT对应项的reuse概率低于1/4，则选择绕过该块
			if (PCRT_ship[pc_entry].reuse_counter * 3 < PCRT_ship[pc_entry].noreuse_counter) {
				return LLC_WAY;                         
			}
		} 
	}

    /* ship */
    // look for the maxRRPV line
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
            if (rrpv[set][i] == maxRRPV)
                return i;

        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit){
        TYPE_NAME += "_HIT";
	}else{
        TYPE_NAME += "_MISS";
	}

    /* ReD */
	if (way == LLC_WAY)     // 当ReD决定绕过一个区块时，不update，直接返回
		return;  

    /* ship */
    if ((type == WRITEBACK) && ip)
        assert(0);

    //cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    //cout << hex << " paddr: " << setw(12) << full_addr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    // handle writeback access
    if (type == WRITEBACK) {
        if (hit)
            return;
        else {
            rrpv[set][way] = maxRRPV-1;
            return;
        }
    }

    // update sampler
    uint32_t s_idx = is_it_sampled(set);
    if (s_idx < SAMPLER_SET)
        update_sampler(cpu, s_idx, full_addr, ip, type);

    if (hit)
        rrpv[set][way] = 0;
    else {
        // SHIP prediction
        uint32_t SHCT_idx = ip % SHCT_PRIME;

        // sanity check
        if (SHCT_idx >= SHCT_PRIME)
            assert(0);

        rrpv[set][way] = maxRRPV-1;
        if (SHCT[cpu][SHCT_idx].counter == SHCT_MAX)
            rrpv[set][way] = maxRRPV;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
